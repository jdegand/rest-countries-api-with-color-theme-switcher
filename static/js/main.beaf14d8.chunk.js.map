{"version":3,"sources":["components/Nav.js","components/SubHeader.js","components/Countries.js","components/CountryDetail.js","App.js","index.js"],"names":["Nav","className","onClick","document","body","classList","toggle","icon","querySelector","modeText","contains","remove","add","style","color","innerText","SubHeader","id","type","name","placeholder","onChange","e","querySelectorAll","forEach","item","toLowerCase","includes","target","value","parentElement","display","Countries","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","map","population","region","capital","flags","to","common","src","svg","alt","official","CountryDetail","props","country","setCountry","useParams","borders","currencies","tld","subregion","Object","entries","nativeName","key","join","values","languages","length","border","KOS","FRA","DEU","LUX","NLD","BEL","AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BLZ","BEN","BMU","BTN","BOL","BIH","BWA","BVT","BRA","VGB","IOT","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","HKG","MAC","CXR","CCK","COL","COM","COG","COD","COK","CRI","CIV","HRV","CUB","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","GUF","PYF","ATF","GAB","GMB","GEO","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","PRK","KOR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","ANT","NCL","NZL","NIC","NER","NGA","NIU","NFK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SVK","SVN","SLB","SOM","ZAF","SGS","SSD","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","UMI","URY","UZB","VUT","VEN","VNM","VIR","WLF","ESH","YEM","ZMB","ZWE","App","exact","path","children","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.beaf14d8.chunk.js","sourcesContent":["import \"../Nav.css\";\n\nfunction Nav() {\n  const changeClass = () => {\n    document.body.classList.toggle(\"dark\");\n\n    let icon = document.querySelector(\".i\");\n    let modeText = document.querySelector(\".dm\");\n\n    if (icon.classList.contains(\"far\")) {\n      icon.classList.remove(\"far\");\n      icon.classList.add(\"fas\");\n      icon.style.color = \"white\";\n      modeText.style.color = \"white\";\n      modeText.innerText = \"Light Mode\";\n    } else {\n      icon.classList.remove(\"fas\");\n      icon.classList.add(\"far\");\n      icon.style.color = \"black\";\n      document.querySelector(\".dm\").style.color = \"black\";\n      modeText.innerText = \"Dark Mode\";\n    }\n  };\n\n  return (\n    <nav className=\"nav\">\n      <ul className=\"nav-ul\">\n        <li className=\"world\">Where in the World?</li>\n        <li className=\"icon pointer\" onClick={changeClass}>\n          <i className=\"i far fa-moon fa-lg\"></i>\n          <span className=\"dm\"> Dark Mode</span>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import \"../SubHeader.css\";\n\nfunction SubHeader() {\n  const handleInputChange = (e) => {\n    let countryNames = document.querySelectorAll(\".countryName\");\n\n    countryNames.forEach((item) => {\n      if (item.innerText.toLowerCase().includes(e.target.value.toLowerCase())) {\n        item.parentElement.parentElement.style.display = \"block\";\n      } else {\n        item.parentElement.parentElement.style.display = \"none\";\n      }\n    });\n  };\n\n  const handleSelectChange = (e) => {\n    let regionNames = document.querySelectorAll(\".region\");\n\n    regionNames.forEach((item) => {\n      if (\n        item.innerText.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        e.target.value === \"Filter by region\"\n      ) {\n        item.parentElement.parentElement.parentElement.style.display = \"block\";\n      } else {\n        item.parentElement.parentElement.parentElement.style.display = \"none\";\n      }\n    });\n  };\n\n  return (\n    <>\n      <form id=\"form\">\n        <div>\n          <i className=\"fas fa-search\"></i>\n          <input\n            type=\"search\"\n            name=\"search\"\n            placeholder=\"Search for a country...\"\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <select\n            name=\"select\"\n            className=\"select\"\n            onChange={handleSelectChange}\n          >\n            <option value=\"Filter by region\">Filter by Region</option>\n            <option value=\"africa\">Africa</option>\n            <option value=\"americas\">Americas</option>\n            <option value=\"asia\">Asia</option>\n            <option value=\"europe\">Europe</option>\n            <option value=\"oceania\">Oceania</option>\n          </select>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default SubHeader;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../Countries.css\";\n\nfunction Countries() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v3.1/all\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div className=\"text-align-center\">Loading...</div>;\n  } else {\n    return (\n      <section className=\"grid\">\n        {items.map((item) => {\n          const { name, population, region, capital, flags } = item;\n\n          return (\n            <article className=\"countries-article\" key={name.official}>\n              <Link to={`/countries/${name.common}`}>\n                <img className=\"flag\" src={flags.svg} alt=\"\" />\n              </Link>\n              <div className=\"details\">\n                <h3 className=\"countryName\">{name.common}</h3>\n                <h3>\n                  Population: <span>{population}</span>\n                </h3>\n                <h3>\n                  Region: <span className=\"region\">{region}</span>\n                </h3>\n                <h3>\n                  Capital: <span>{capital}</span>\n                </h3>\n              </div>\n            </article>\n          );\n        })}\n      </section>\n    );\n  }\n}\n\nexport default Countries;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"../CountryDetail.css\";\n\nfunction CountryDetail(props) {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [country, setCountry] = useState([]);\n\n  const { name } = useParams();\n\n  useEffect(() => {\n    fetch(`https://restcountries.com/v3.1/name/${name}`)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setCountry(result);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, [name]);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div className=\"text-align-center\">Loading...</div>;\n  } else {\n    return (\n      <div className=\"detail-container\">\n        <div className=\"back-btn-container\">\n          <Link to=\"/\">\n            <i className=\"fas fa-long-arrow-alt-left\"></i>\n            <span className=\"back\"> Back</span>\n          </Link>\n        </div>\n        <section className=\"detail-section\">\n          {country.map((item) => {\n            const {\n              borders,\n              currencies,\n              name,\n              population,\n              region,\n              capital,\n              flags,\n              tld,\n              subregion,\n            } = item;\n            // nativeName is now an object\n            // only borders can have no results  - borders has length even if it doesn't have any borders ie San Martin\n            // you'll see an empty rectangle - changed conditional to not display anything if no borders\n            // need nanoid for key?\n            return (\n              <article className=\"flex\" key={population}>\n                <div>\n                  <img className=\"detail-flag\" src={flags.svg} alt=\"\" />\n                </div>\n                <div className=\"detail-text-container\">\n                  <div>\n                    <h2>\n                      <span className=\"detail-name\">{name.common}</span>\n                    </h2>\n                    <h3 className=\"margin-block-10\">\n                      Native Name:{\" \"}\n                      <span>\n                        {Object.entries(name.nativeName)[0][1].official}\n                      </span>\n                    </h3>\n                    <h3 className=\"margin-block-10\">\n                      Population: <span>{population}</span>\n                    </h3>\n                    <h3 className=\"margin-block-10\">\n                      Region: <span>{region}</span>\n                    </h3>\n                    <h3 className=\"margin-block-10\">\n                      Sub Region: <span>{subregion}</span>\n                    </h3>\n                    <h3 className=\"margin-block-10\">\n                      Capital: <span>{capital[0]}</span>\n                    </h3>\n                  </div>\n                  <div className=\"detail-languages-div\">\n                    <h3 className=\"margin-block-10\">\n                      Top Level Domain: <span>{tld[0]}</span>\n                    </h3>\n                    <h3 className=\"margin-block-10\">\n                      Currency:{\" \"}\n                      <span>\n                        {Object.entries(currencies)\n                          .map(([key, value]) => {\n                            return currencies[key].name;\n                          })\n                          .join(\", \")}\n                      </span>\n                    </h3>\n                    <h3 className=\"margin-block-10\">\n                      Languages:{\" \"}\n                      <span>{Object.values(item.languages).join(\", \")}</span>\n                    </h3>\n                  </div>\n                  <div className=\"borderCountries-container\">\n                    <h3>Border Countries:</h3>\n                    {borders && borders.length > 1 && (\n                      <div className=\"flex borderCountries\">\n                        {borders.map((border) => {\n                          const matchingObj = {\n                            KOS: \"Kosovo, Republic of\",\n                            FRA: \"France\",\n                            DEU: \"Germany\",\n                            LUX: \"Luxembourg\",\n                            NLD: \"Netherlands\",\n                            BEL: \"Belgium\",\n                            AFG: \"Afghanistan\",\n                            ALA: \"Aland Islands\",\n                            ALB: \"Albania\",\n                            DZA: \"Algeria\",\n                            ASM: \"American Samoa\",\n                            AND: \"Andorra\",\n                            AGO: \"Angola\",\n                            AIA: \"Anguilla\",\n                            ATA: \"Antarctica\",\n                            ATG: \"Antigua and Barbuda\",\n                            ARG: \"Argentina\",\n                            ARM: \"Armenia\",\n                            ABW: \"Aruba\",\n                            AUS: \"Australia\",\n                            AUT: \"Austria\",\n                            AZE: \"Azerbaijan\",\n                            BHS: \"Bahamas\",\n                            BHR: \"Bahrain\",\n                            BGD: \"Bangladesh\",\n                            BRB: \"Barbados\",\n                            BLR: \"Belarus\",\n                            BLZ: \"Belize\",\n                            BEN: \"Benin\",\n                            BMU: \"Bermuda\",\n                            BTN: \"Bhutan\",\n                            BOL: \"Bolivia\",\n                            BIH: \"Bosnia and Herzegovina\",\n                            BWA: \"Botswana\",\n                            BVT: \"Bouvet Island\",\n                            BRA: \"Brazil\",\n                            VGB: \"British Virgin Islands\",\n                            IOT: \"British Indian Ocean Territory\",\n                            BRN: \"Brunei Darussalam\",\n                            BGR: \"Bulgaria\",\n                            BFA: \"Burkina Faso\",\n                            BDI: \"Burundi\",\n                            KHM: \"Cambodia\",\n                            CMR: \"Cameroon\",\n                            CAN: \"Canada\",\n                            CPV: \"Cape Verde\",\n                            CYM: \"Cayman Islands\",\n                            CAF: \"Central African Republic\",\n                            TCD: \"Chad\",\n                            CHL: \"Chile\",\n                            CHN: \"China\",\n                            HKG: \"Hong Kong, SAR China\",\n                            MAC: \"Macao, SAR China\",\n                            CXR: \"Christmas Island\",\n                            CCK: \"Cocos (Keeling) Islands\",\n                            COL: \"Colombia\",\n                            COM: \"Comoros\",\n                            COG: \"Congo (Brazzaville)\",\n                            COD: \"Congo, (Kinshasa)\",\n                            COK: \"Cook Islands\",\n                            CRI: \"Costa Rica\",\n                            CIV: \"Côte d'Ivoire\",\n                            HRV: \"Croatia\",\n                            CUB: \"Cuba\",\n                            CYP: \"Cyprus\",\n                            CZE: \"Czech Republic\",\n                            DNK: \"Denmark\",\n                            DJI: \"Djibouti\",\n                            DMA: \"Dominica\",\n                            DOM: \"Dominican Republic\",\n                            ECU: \"Ecuador\",\n                            EGY: \"Egypt\",\n                            SLV: \"El Salvador\",\n                            GNQ: \"Equatorial Guinea\",\n                            ERI: \"Eritrea\",\n                            EST: \"Estonia\",\n                            ETH: \"Ethiopia\",\n                            FLK: \"Falkland Islands (Malvinas)\",\n                            FRO: \"Faroe Islands\",\n                            FJI: \"Fiji\",\n                            FIN: \"Finland\",\n                            GUF: \"French Guiana\",\n                            PYF: \"French Polynesia\",\n                            ATF: \"French Southern Territories\",\n                            GAB: \"Gabon\",\n                            GMB: \"Gambia\",\n                            GEO: \"Georgia\",\n                            GHA: \"Ghana\",\n                            GIB: \"Gibraltar\",\n                            GRC: \"Greece\",\n                            GRL: \"Greenland\",\n                            GRD: \"Grenada\",\n                            GLP: \"Guadeloupe\",\n                            GUM: \"Guam\",\n                            GTM: \"Guatemala\",\n                            GGY: \"Guernsey\",\n                            GIN: \"Guinea\",\n                            GNB: \"Guinea-Bissau\",\n                            GUY: \"Guyana\",\n                            HTI: \"Haiti\",\n                            HMD: \"Heard and Mcdonald Islands\",\n                            VAT: \"Vatican City\",\n                            HND: \"Honduras\",\n                            HUN: \"Hungary\",\n                            ISL: \"Iceland\",\n                            IND: \"India\",\n                            IDN: \"Indonesia\",\n                            IRN: \"Iran, Islamic Republic of\",\n                            IRQ: \"Iraq\",\n                            IRL: \"Ireland\",\n                            IMN: \"Isle of Man\",\n                            ISR: \"Israel\",\n                            ITA: \"Italy\",\n                            JAM: \"Jamaica\",\n                            JPN: \"Japan\",\n                            JEY: \"Jersey\",\n                            JOR: \"Jordan\",\n                            KAZ: \"Kazakhstan\",\n                            KEN: \"Kenya\",\n                            KIR: \"Kiribati\",\n                            PRK: \"Korea (North)\",\n                            KOR: \"Korea (South)\",\n                            KWT: \"Kuwait\",\n                            KGZ: \"Kyrgyzstan\",\n                            LAO: \"Laos\",\n                            LVA: \"Latvia\",\n                            LBN: \"Lebanon\",\n                            LSO: \"Lesotho\",\n                            LBR: \"Liberia\",\n                            LBY: \"Libya\",\n                            LIE: \"Liechtenstein\",\n                            LTU: \"Lithuania\",\n                            MKD: \"Macedonia, Republic of\",\n                            MDG: \"Madagascar\",\n                            MWI: \"Malawi\",\n                            MYS: \"Malaysia\",\n                            MDV: \"Maldives\",\n                            MLI: \"Mali\",\n                            MLT: \"Malta\",\n                            MHL: \"Marshall Islands\",\n                            MTQ: \"Martinique\",\n                            MRT: \"Mauritania\",\n                            MUS: \"Mauritius\",\n                            MYT: \"Mayotte\",\n                            MEX: \"Mexico\",\n                            FSM: \"Micronesia, Federated States of\",\n                            MDA: \"Moldova\",\n                            MCO: \"Monaco\",\n                            MNG: \"Mongolia\",\n                            MNE: \"Montenegro\",\n                            MSR: \"Montserrat\",\n                            MAR: \"Morocco\",\n                            MOZ: \"Mozambique\",\n                            MMR: \"Myanmar\",\n                            NAM: \"Namibia\",\n                            NRU: \"Nauru\",\n                            NPL: \"Nepal\",\n                            ANT: \"Netherlands Antilles\",\n                            NCL: \"New Caledonia\",\n                            NZL: \"New Zealand\",\n                            NIC: \"Nicaragua\",\n                            NER: \"Niger\",\n                            NGA: \"Nigeria\",\n                            NIU: \"Niue\",\n                            NFK: \"Norfolk Island\",\n                            MNP: \"Northern Mariana Islands\",\n                            NOR: \"Norway\",\n                            OMN: \"Oman\",\n                            PAK: \"Pakistan\",\n                            PLW: \"Palau\",\n                            PSE: \"Palestinian Territory\",\n                            PAN: \"Panama\",\n                            PNG: \"Papua New Guinea\",\n                            PRY: \"Paraguay\",\n                            PER: \"Peru\",\n                            PHL: \"Philippines\",\n                            PCN: \"Pitcairn\",\n                            POL: \"Poland\",\n                            PRT: \"Portugal\",\n                            PRI: \"Puerto Rico\",\n                            QAT: \"Qatar\",\n                            REU: \"Réunion\",\n                            ROU: \"Romania\",\n                            RUS: \"Russian Federation\",\n                            RWA: \"Rwanda\",\n                            BLM: \"Saint-Barthélemy\",\n                            SHN: \"Saint Helena\",\n                            KNA: \"Saint Kitts and Nevis\",\n                            LCA: \"Saint Lucia\",\n                            MAF: \"Saint-Martin (French part)\",\n                            SPM: \"Saint Pierre and Miquelon\",\n                            VCT: \"Saint Vincent and Grenadines\",\n                            WSM: \"Samoa\",\n                            SMR: \"San Marino\",\n                            STP: \"Sao Tome and Principe\",\n                            SAU: \"Saudi Arabia\",\n                            SEN: \"Senegal\",\n                            SRB: \"Serbia\",\n                            SYC: \"Seychelles\",\n                            SLE: \"Sierra Leone\",\n                            SGP: \"Singapore\",\n                            SVK: \"Slovakia\",\n                            SVN: \"Slovenia\",\n                            SLB: \"Solomon Islands\",\n                            SOM: \"Somalia\",\n                            ZAF: \"South Africa\",\n                            SGS: \"South Georgia and the South Sandwich Islands\",\n                            SSD: \"South Sudan\",\n                            ESP: \"Spain\",\n                            LKA: \"Sri Lanka\",\n                            SDN: \"Sudan\",\n                            SUR: \"Suriname\",\n                            SJM: \"Svalbard and Jan Mayen Islands\",\n                            SWZ: \"Swaziland\",\n                            SWE: \"Sweden\",\n                            CHE: \"Switzerland\",\n                            SYR: \"Syrian Arab Republic (Syria)\",\n                            TWN: \"Taiwan, Republic of China\",\n                            TJK: \"Tajikistan\",\n                            TZA: \"Tanzania, United Republic of\",\n                            THA: \"Thailand\",\n                            TLS: \"Timor-Leste\",\n                            TGO: \"Togo\",\n                            TKL: \"Tokelau\",\n                            TON: \"Tonga\",\n                            TTO: \"Trinidad and Tobago\",\n                            TUN: \"Tunisia\",\n                            TUR: \"Turkey\",\n                            TKM: \"Turkmenistan\",\n                            TCA: \"Turks and Caicos Islands\",\n                            TUV: \"Tuvalu\",\n                            UGA: \"Uganda\",\n                            UKR: \"Ukraine\",\n                            ARE: \"United Arab Emirates\",\n                            GBR: \"United Kingdom\",\n                            USA: \"United States of America\",\n                            UMI: \"US Minor Outlying Islands\",\n                            URY: \"Uruguay\",\n                            UZB: \"Uzbekistan\",\n                            VUT: \"Vanuatu\",\n                            VEN: \"Venezuela\",\n                            VNM: \"Viet Nam\",\n                            VIR: \"Virgin Islands\",\n                            WLF: \"Wallis and Futuna Islands\",\n                            ESH: \"Western Sahara\",\n                            YEM: \"Yemen\",\n                            ZMB: \"Zambia\",\n                            ZWE: \"Zimbabwe\",\n                          };\n\n                          return (\n                            <ul key={border}>\n                              <li>{matchingObj[border]}</li>\n                            </ul>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </article>\n            );\n          })}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default CountryDetail;\n","import Nav from \"./components/Nav\";\nimport SubHeader from \"./components/SubHeader\";\nimport Countries from \"./components/Countries\";\nimport CountryDetail from \"./components/CountryDetail\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\">\n            <SubHeader />\n            <Countries />\n          </Route>\n          <Route path=\"/countries/:name\" children={<CountryDetail />} />\n        </Switch>\n      </>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}